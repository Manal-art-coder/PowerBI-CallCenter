// ðŸ“Œ Assurez-vous que le fichier est dans le dossier "data/" avant d'exÃ©cuter le script.
CallCharges_table:
let
    Source = Excel.Workbook(File.Contents("data/CallCharges.xlsx"), null, true),
    CallCharges_Table = Source{[Item="CallCharges",Kind="Table"]}[Data],
    #"Changed Type" = Table.TransformColumnTypes(CallCharges_Table,{{"Call Type Key", Int64.Type}, {"Call Type", type text}, 
    {"Call Charges 2018 (Min)", type number}, {"Call Charges 2019 (Min)", type number}, 
    {"Call Charges 2020 (Min)", type number}, {"Call Charges 2021 (Min)", type number}}),
    #"Unpivoted Columns" = Table.UnpivotOtherColumns(#"Changed Type", {"Call Type Key", "Call Type"}, "Year", "Call Charges"),
    #"Replaced Year Values" = Table.ReplaceValue(#"Unpivoted Columns","Call Charges ", "",Replacer.ReplaceText,{"Year"}),
    #"Renamed Columns" = Table.RenameColumns(#"Replaced Year Values",{{"Call Type Key", "Call Type ID"}}),
    #"Changed Type1" = Table.TransformColumnTypes(#"Renamed Columns",{{"Year", Int64.Type}})
in
    #"Changed Type1"

// ðŸ“Œ Ajoutez le fichier "Employees.xlsx" dans "data/" et ajustez le chemin si nÃ©cessaire.
Employees_table:
let
    Source = Excel.Workbook(File.Contents("data/Employees.xlsx"), null, true),
    Employees_Table = Source{[Item="Employees",Kind="Table"]}[Data],
    #"Changed Type" = Table.TransformColumnTypes(Employees_Table,{{"EmployeeID", type text}, {"EmployeeName", type text}, 
    {"Site", type text}, {"ManagerName", type text}}),
    #"Removed Duplicates" = Table.Distinct(#"Changed Type", {"EmployeeID"})
in
    #"Removed Duplicates"

// ðŸ“Œ Fusion des donnÃ©es d'appels et nettoyage
Call_Center_All:
let
    Source = Csv.Document(File.Contents("data/CallData.csv"), [Delimiter=",", Columns=6, Encoding=1252, QuoteStyle=QuoteStyle.None]),
    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers",{{"CallTimestamp", type datetime}, {"Call Type", Int64.Type}, 
    {"EmployeeID", type text}, {"CallDuration", Int64.Type}, {"WaitTime", Int64.Type}}),
    #"Removed Call Abandoned Column" = Table.RemoveColumns(#"Changed Type",{"CallAbandoned"}),
    #"Added SLA Compliance" = Table.AddColumn(#"Removed Call Abandoned Column", "SLA Compliance", 
    each if [WaitTime] < 35 then "Within SLA" else "Outside SLA"),
    #"Inserted Year" = Table.AddColumn(#"Added SLA Compliance", "Year", each Date.Year([CallTimestamp]), Int64.Type),
    #"Merged Employees" = Table.NestedJoin(#"Inserted Year", {"EmployeeID"}, Employees_table, {"EmployeeID"}, "Employees", JoinKind.LeftOuter),
    #"Expanded Employees Data" = Table.ExpandTableColumn(#"Merged Employees", "Employees", {"Site"}, {"Employee Site"})
in
    #"Expanded Employees Data"

// ðŸ“Œ Table des types d'appels
Call_type_table:
let
    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText("i45WMlTSUQpOzEktVorViVYyAvKcMnNyMvPSwXxjID8kNTlDIbi0oCC/qEQpNhYA", 
    BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table 
    [#"Call Type ID" = _t, #"Call Type" = _t]),
    #"Changed Type" = Table.TransformColumnTypes(Source,{{"Call Type ID", Int64.Type}, {"Call Type", type text}})
in
    #"Changed Type"
